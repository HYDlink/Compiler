module TinyML.ParseLrc


open System
open System.IO
open FParsec

[<Literal>]
let lyric =
    @"
[00:01.28]右肩の蝶
[00:08.50]呗：ろん
[00:11.82][00:17.82][00:28.47][01:16.53][01:30.79][01:35.81][01:44.76][01:51.22][02:31.92][03:01.66][03:27.51][04:13.23][04:19.95][04:23.14][04:24.07]
[00:13.58][00:40.95][01:28.88][04:07.81][04:21.69]不协和音(ふきょうわおん)
[00:29.12][01:17.14][03:56.08][04:09.84]右肩(みぎかた)に紫(むらさき)蝶々(ちょうちょう)
[00:32.38][01:20.50][03:59.53]キスをしたこの部屋(へや)の隅(すみ)で
[00:35.99][01:23.92][04:03.59][04:16.64]切(せつ)ないという感情(かんじょう)を知(し)る
[00:39.19][01:27.19][04:06.25]响(ひび)くピアノ
[00:42.96]悪(わる)い梦(ゆめ)にうなされた私(わたし)を早(はや)く起(お)こして
[00:49.87]どんなことでも始(はじ)まりは些细(ささい)なことでしょう？
[00:56.76]どこがいいかなんて
[00:59.74]闻(き)かれても困(こま)る绮丽(きれい)な
[01:03.52]夜(よる)に惑(まど)わされたまま行方(ゆくえ)不明(ふめい)だから
[01:10.41]长(なが)いまつげ
[01:11.68]三日月(みかつき)アイライン
[01:13.90]まぶたに乗(の)せて 光(ひか)るリップ
[01:58.55]雨(あめ)の中(なか)で濡(ぬ)れた
[02:01.44]髪(かみ)が异常(いじょう)に冷(つめ)たくて
[02:05.23]寂(さび)しさをトイレに吐(は)き出(だ)して震(ふる)えて待(ま)ってる
[02:12.15]追(お)いかけては逃(に)げるからそれ以上(いじょう)で返(かえ)して
[02:18.97]真剣(しんけん)だから笑(わら)う
[02:21.99]と痛(いた)い目(め)に遭(あ)うよいい？
[02:25.87]赤(あか)い爪(つめ)と
[02:27.21]安物(やすもの)の指轮(ゆびわ)
[02:29.25]伤(きず)付(つ)く度(たび)増(ふ)えるピアス
[02:32.57]抱(だ)き寄(よ)せて
[02:34.02]歪(いが)んだ体(からだ)
[02:35.97][03:45.86]埋(う)めるのはあなたしかいない
[02:39.43][03:49.23]そうでしょう？ わかってるくせに
[02:42.80][03:52.70]境界(きょうかい)线(せん)とっくに越(こ)えてる
[02:46.27][03:28.70]后悔(こうかい)は死(し)ぬほどしてる
[02:49.63][03:31.99]その分(ぶん)だけ快感(かいかん)を呼(よ)び覚(さ)ます
[02:53.21][03:35.56]狂(くる)いだした私(わたし)を止(と)めて
[02:56.56][03:38.86]一瞬(いっしゅん)でラクにしてよ
[03:20.66]伤口(きずぐち)から溶(と)け出(だ)したものは
[03:24.15]爱情(あいじょう)それとも Ah...
[03:42.36]抱(だ)き寄(よ)せて 歪(いが)んだ体(からだ)"

type LyricLine = { Times: TimeSpan list; Text: string }
type LyricFile = LyricLine list
type LyricLineSimple = { Time: TimeSpan; Text: string }
type LyricData = LyricLineSimple list

let LyricLine (times, text) = { Times = times; Text = text }

let simplifyLyricLine { Times = times; Text = text } =
    List.map (fun t -> { Time = t; Text = text }) times

let LyricLineFromSimple{ Time = time; Text = text } = { Times = [ time ]; Text = text }



let pTime: Parser<TimeSpan,unit> =
    pchar '[' >>. (pint32 .>> pchar ':' (* minute *) )
    .>>. (pint32 .>> pchar '.' (* second *) )
    .>>. pint32 (* ff *)
    .>> pchar ']'
    |>> (fun ((m, s), f) -> TimeSpan(0, 0, m, s, f * 10))

let pTimeNew: Parser<TimeSpan,unit> =
    pchar '[' >>. manyCharsTill anyChar (pchar ']')
    |>> TimeSpan.Parse

let pLyricLine = many1 pTime .>>. (restOfLine true) |>> LyricLine

let pLyricFile: Parser<LyricFile, unit> =
    many (
        (pLyricLine |>> Some)
        <|> (skipNewline |>> fun _ -> None) (* allow empty line or error line*)
    )
    |>> List.choose id

let testPLyric () =
    run pTime "[00:01.28]" |> printfn "%A"
    run pLyricLine "[01:10.41]长(なが)いまつげ" |> printfn "%A"
    run pLyricLine "[00:39.19][01:27.19][04:06.25]响(ひび)くピアノ" |> printfn "%A"

    run
        pLyricFile
        @"[00:01.28]右肩の蝶
[00:08.50]呗：ろん"
    |> printfn "%A"

    run pLyricFile lyric |> printfn "%A"



// let LyricData (file: LyricFile): LyricData =
let LyricData: LyricFile -> LyricData =
    List.collect simplifyLyricLine >> List.sortBy (fun { Time = t; Text = _ } -> t)

let FlattenLyricFile = LyricData >> List.map LyricLineFromSimple

[<Literal>]
let template = "Dialogue: 0,{start},{end},OPJP,,0,0,0,,{text}"

let assTime (time:TimeSpan) = time.ToString("h\:mm\:ss\.ff")

/// \pos(x,y)
let AssLineWithPos: LyricData -> string =
    List.windowed 2
    >> List.map (fun [ start; e ] -> $"Dialogue: 0,{assTime start.Time},{assTime e.Time},OPJP,,0,0,0,,{start.Text}")
    >> List.toArray
    >> (fun a -> String.Join("\n", a))

let ToAssFile: LyricData -> string =
    AssLineWithPos
    >> (+)
        @"[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.709
PlayResX: 1920
PlayResY: 1080

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,方正兰亭圆_GBK_准,68,&H00FFFFFF,&HF0000000,&H0062676C,&HF0000000,0,0,0,0,100,100,0,0,1,3.5,0.5,2,30,30,36,1
Style: OPJP,A-OTF Shin Maru Go Pr6N DB,65,&H00FFFFFF,&H00000000,&H00444476,&H00000000,0,0,0,0,100,100,0,0,1,3,0,8,0,0,10,1
Style: OPCN,方正兰亭圆_GBK_粗,50,&H00FFFFFF,&H00000000,&H00444476,&H00000000,0,0,0,0,100,105,0,0,1,3,0,2,0,0,20,1
Style: EDJP,A-OTF Shin Maru Go Pr6N DB,55,&H00FFFFFF,&H00000000,&H003985E2,&H00000000,0,0,0,0,100,100,0,0,1,3,0,9,30,30,10,1
Style: EDCN,方正兰亭圆_GBK_粗,42,&H00FFFFFF,&H00000000,&H003985E2,&H00000000,0,0,0,0,100,105,0,0,1,3,0,1,30,30,20,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,OPJP
"

// 00:01:28,000
let srtTimeCode (time:TimeSpan) = time.ToString("hh\:mm\:ss\,fff")
let ToSrtLine: LyricData -> string =
    List.windowed 2
    >> List.map (fun [start; e] -> if String.IsNullOrWhiteSpace start.Text then None else Some [start;e])
    >> List.choose id
    >> List.mapi (fun i [ start; e ] -> (i+1).ToString() + $"\n{srtTimeCode start.Time} --> {srtTimeCode e.Time}\n" + start.Text)
    >> List.toArray
    >> (fun a -> String.Join("\n\n", a))


let ToLyricData = 
    run pLyricFile
    >> function
        | Success (foo, foo1, position) -> LyricData foo

let lrc2ass = ToLyricData >> ToAssFile
let lrc2srt = ToLyricData >> ToSrtLine
        
let testAss() =
    let text = lrc2ass lyric
    File.WriteAllText(@"C:\Work\Study\Language\F#\FSharpLab\LyricVideo\video.ass", text)
    
let testSrt() =
    let text = lrc2srt lyric
    File.WriteAllText(@"C:\Work\Study\Language\F#\FSharpLab\LyricVideo\video.srt", text)
